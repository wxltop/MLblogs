import{_ as a,r as l,o as c,c as t,a as e,b as s,d,e as n}from"./app-aa9cafec.js";const r={},o=n(`<h2 id="我的情况" tabindex="-1"><a class="header-anchor" href="#我的情况" aria-hidden="true">#</a> 我的情况</h2><p>我之前创建了一个github账号wangxl12，当时也按照教程生成了ssh key，并且将公钥放在了github中保存了。现在我又创建了一个github账号wxltop，并新建了一个仓库，我想将仓库clone到本地，编辑之后上传代码。但是，我遇到了如下的问题：</p><ul><li>在没有向wxltop账号里存放ssh key的情况下，使用ssh协议克隆可以成功？</li><li>克隆成功之后，进行修改代码，然后上传，即<code>git push -u origin main</code>报错，说用户<code>wangxl12</code>没有权限，为什么可以克隆但是不能上传？为什么用户是<code>wangxl12</code>？我没有显示指定呀？</li></ul><p>我的系统是windows 10，下面解决这个问题。</p><h2 id="解决问题" tabindex="-1"><a class="header-anchor" href="#解决问题" aria-hidden="true">#</a> 解决问题</h2><ol><li><p>打开Git Bush，然后输入如下指令重新生成一个ssh key（<strong>注意new_id_rsa可以换成你喜欢的名字</strong>）：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh-keygen -t rsa -C &#39;xxxxx@youremail.com&#39; -f ~/.ssh/new_id_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换到<code>C:\\Users\\name\\.ssh</code>(<strong>注意将name换成自己的windows用户名</strong>)目录下，可以发现新增了如下2个文件：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>new_id_rsa
new_id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看系统ssh-key代理，执行如下命令：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh-add -l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果报错<code>Could not open a connection to your authentication agent.</code>则需要先执行以下如下的指令：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh-agent bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新执行：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh-add -l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令如果输出 <code>The agent has no identities</code>. 则表示没有代理。如果系统有代理，可以执行下面的命令清除代理:</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh-add -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后依次将不同的ssh添加代理，执行命令如下：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh-add ~/.ssh/id_rsa
ssh-add ~/.ssh/new_id_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置~/.ssh/config文件：</p><p>为什么之前不配置也可以呢？因为之前只有一个ssh key，github使用SSH与客户端连接。如果是单用户（first），生成密钥对后，将公钥保存至 GitHub ，每次连接时SSH客户端发送本地私钥（默认~/.ssh/id_rsa）到服务端验证。单用户情况下，连接的服务器上保存的公钥和发送的私钥自然是配对的。但是如果是 <strong>多用户</strong> （first，second），我们在连接到second的帐号时，second保存的是自己的公钥，但是SSH客户端依然发送默认私钥，即first的私钥，那么这个验证自然无法通过。</p><p>创建一个config文件，然后添加如下内容：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code># Default github user(first@mail.com)
Host github.com
HostName github.com
User git
IdentityFile C:/Users/username/.ssh/id_rsa
 
# new account (second_email@mail.com)
Host github-new
HostName github.com
User git
IdentityFile C:/Users/username/.ssh/new_id_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中参数含义如下：</p><p><strong>Host</strong> ： 相当于一个别名，远程仓库地址的域名别名它涵盖了下面一个段的配置，我们可以通过他来替代将要连接的服务器地址。这里可以使用任意字段或通配符。访问ssh的时候如果服务器地址能匹配上这里Host指定的值，则Host下面指定的HostName将被作为最终的服务器地址使用，并且将使用该Host字段下面配置的所有自定义配置来覆盖默认的~/.ssh/config配置信息。</p><p><strong>HostName</strong> ：真正连接的服务器地址</p><p><strong>User</strong>：自定义的用户名 （直接用git就行）</p><p><strong>PreferredAuthentications</strong> ：指定优先使用哪种方式验证，支持密码和秘钥验证方式</p><p><strong>IdentityFile</strong>：指定本次连接使用的密钥文件</p><p><strong>在连接非默认账号的github仓库时，远程库的地址要对应的做一些修改</strong>，比如现在添加second账号下的一个仓库，则需要这样添加：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>git remote add wxltop git@github-new:wxltop/wxltop.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是下面这样的话就会添加默认账号下的仓库：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>git remote add wxltop git@github.com:wxltop/wxltop.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从这里我们看出，一开始就算没有将第二个账号的秘钥生成并放入GitHub中，我们直接clone下来是可以成功的，因为我们默认用的是第一个账户：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code># 这里的github.com对应的就是config文件中的Host github.com
git clone git@github.com:wxltop/wxltop.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要用第二个账号的秘钥克隆，就需要修改为下面这样，当然需要提前将new_id_rsa中的内容放入github中，添加新的ssh key。</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code># 这里的github-new对应的就是config文件中的Host github-new
git clone git@github-new:wxltop/wxltop.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就是基于第二个账号下载过来的。克隆过来了之后弄几个配置（<strong>特别是用户名和邮箱，必须配置，不然提交修改之后去github查看还是默认用户提交的修改</strong>）：</p><ol><li>配置用户名：<code>git config -global user.name &quot;xxx&quot;</code>，将xxx替换为你想设置的用户名。</li><li>配置邮箱：<code>git config -global user.email &quot;xxx&quot;</code>，将xxx替换为邮箱</li><li>配置大小写敏感：<code>git config -global core.ignorecase false</code>，直接输入这个指令即可。</li><li>查看配置信息：<code>git config --list</code>。</li></ol><p><strong>这里的用户名和邮箱建议和第二个账号的用户名和邮箱一致，我原本以为这个并不影响，所以一开始克隆过来之后没有配置，但是后面的代码修改在GitHub上查看都是以第一个账号为名义修改的，查了很多教程都无法解决这个问题。然后抱着尝试的心态将用户名和邮箱改成第二个账号的用户名和邮箱之后，重新修改代码、提交代码，在GitHub上查看是以第二个账号为名义修改的。</strong></p></li><li><p>测试ssh</p><p>测试第一个账号：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh -T git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>Hi wangxl12! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试第二个账号：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh -T git@github-new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>Hi github-new! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改代码并上传</p><p>经过add、commit可以push一下：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>git push -u origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>有一个问题</p><p>比如我刚刚打开一个Git Bash shell之后，将上述步骤都走了一遍，然后关掉了当前的Git Bash shell（会提示当前有一个进程正在进行，是否继续关掉），等到下一次打开Git Bash shell的时候，需要重新执行一下<code>ssh-agent bash</code>，然后再次测试一下看看是否连接成功：<code>ssh -T git@wxltop</code>，连接成功之后才可以确认是在wxltop账号下。</p></li></ol><p>Reference</p>`,7),u={href:"https://www.cnblogs.com/ayseeing/p/4445194.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.zhihu.com/people/wxl-59-25",target:"_blank",rel:"noopener noreferrer"},g={href:"http://167.86.101.119/lV5mrUYsucU/how-to-fix-github-permission-denied-publickey-fatal-could-not-read-from-remote-repository",target:"_blank",rel:"noopener noreferrer"},p=n(`<h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><p>不知道为什么前段时间还可以用的，但是最近突然使用git push的时候报错没有权限.</p><p>先测试可用性：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh -T -p 443 git@ssh.github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现可以用，所以打开~/.ssh/config文件，将里面的两个用户的HostName改成：ssh.github.com（之前是github.com），然后添加一个字段：<code>Port 443</code>，再次测试就可以了：</p><p>测试第一个账号：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh -T git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试第二个账号：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ssh -T git@github-new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Reference:</p>`,10),h={href:"https://blog.csdn.net/m0_38072683/article/details/82939535",target:"_blank",rel:"noopener noreferrer"};function v(b,x){const i=l("ExternalLinkIcon");return c(),t("div",null,[o,e("p",null,[e("a",u,[s("生成多个git ssh密钥 - 破男孩 - 博客园"),d(i)])]),e("p",null,[e("a",m,[s("https://www.zhihu.com/people/wxl-59-25"),d(i)])]),e("p",null,[e("a",g,[s("http://167.86.101.119/lV5mrUYsucU/how-to-fix-github-permission-denied-publickey-fatal-could-not-read-from-remote-repository"),d(i)])]),p,e("p",null,[e("a",h,[s("git Key is already in use"),d(i)])])])}const _=a(r,[["render",v],["__file","yitaizhujishengchengduogessh_key，wuchongtutijiaodaimazhiyuanchengcangku.html.vue"]]);export{_ as default};
