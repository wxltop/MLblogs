import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-aa9cafec.js";const u={},i=n("h2",{id:"_15-三数之和",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-三数之和","aria-hidden":"true"},"#"),s(" 15. 三数之和")],-1),r={href:"https://leetcode.cn/problems/3sum/",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>难度：中等</p><p><strong>方法1：哈希表</strong></p><p>题目要求返回的结果列表中不能有重复的，比如[1, 2, 0]和[0, 2, 1]是重复的。可以使用前面题目，先将两个数之和作为哈希表的键来存储中间结果，然后再找第三个数，但是这样<strong>难点在于如何高效去除重复解。</strong></p><p>下面代码是<strong>没有去重</strong>的功能：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        hashmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token keyword">if</span> val <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span>
                    hashmap<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    hashmap<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">]</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span>
                <span class="token keyword">for</span> pair <span class="token keyword">in</span> hashmap<span class="token punctuation">[</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> i <span class="token keyword">in</span> pair<span class="token punctuation">:</span>
                        <span class="token keyword">continue</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：排序+双指针</strong></p><p>拿到一个题不要总想着用更好的方法来解（总想着O(n)），有的题确实无法O(n)内解决，所以<strong>有想法得敢于尝试，先做出来再谈优化</strong>。思路是：先对nums排序，然后固定一个数nums[i]，另两个数分别从nums[i+1]往右遍历、从nums[len(nums)-1]往左遍历。若值偏小，则右移l指针，若值偏大，则左移右指针。</p><p>方法1的难点在去重上，因为要判断[-1, 0, 2]和[2, -1, 0]是否是重复的得花额外很多时间。若给定的序列是有序的，假设前几个是：-1, -1, -1, 2, ...，很明显，若<strong>第一个数选择了-1</strong>，<strong>后面两个-1就不能再作为第一个数</strong>（注意不是第二个数和第三个数不能选-1，是不能同时存在[-1, -1, 2]和[2, -1, -1]，但[-1, -1, 2]内有两个相同值的情况是可以存在的），<strong>这就是排序的作用，除此之外，若sum值偏小还是偏大，很容易判断该如何移动指针，也是排序带来的作用</strong>。</p><p>从上面的思路上看，<strong>先有条理地将三个数区分开来：a, b, c分别为nums[i]，nums[l], nums[r]</strong>。然后去重思路也比较显然：</p><p>第一个数去重：if a == nums[i-1]: continue</p><p>第二个数去重：if b == nums[l-1]: continue</p><p>第三个数去重：if c == nums[r+1]: continue</p><p>注意第三个数为了和第二个数区分开来，从末尾开始往前遍历。</p><p>时间复杂度：O(nlogn+n^2)</p><p>空间复杂度：O(1)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> a <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 去重，防止a有重复的被计算</span>
                <span class="token keyword">continue</span>
            l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
            r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
                <span class="token comment"># 这部分判断实现的时候注意，最容易想到的是：</span>
                <span class="token comment"># 若sum!=0,假设是&lt;0，很自然的这里加一个循环l += 1</span>
                <span class="token comment"># 同样sum&gt;0时循环r -= 1. 然后else里面，若sum=0，则l+1,r-1</span>
                <span class="token comment"># 但是这样仍然会出现重复，所以还要用一个循环来去重</span>
                <span class="token comment"># 这样代码就显得非常冗余，实现的时候将sum!=0时候的循环去掉</span>
                <span class="token comment"># 因为这里用循环就是为了去重，而若sum&lt;0，就算重复也不会加入ans</span>
                <span class="token comment"># 所以按照下面的做法代码更简洁：</span>
                <span class="token keyword">if</span> a <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    l <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">elif</span> a <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    r <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    l <span class="token operator">+=</span> <span class="token number">1</span>
                    r <span class="token operator">-=</span> <span class="token number">1</span>
                    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token keyword">and</span> r <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                            l <span class="token operator">+=</span> <span class="token number">1</span>
                        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                            r <span class="token operator">-=</span> <span class="token number">1</span>
                        <span class="token keyword">else</span><span class="token punctuation">:</span>
                            <span class="token keyword">break</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-四数之和" tabindex="-1"><a class="header-anchor" href="#_18-四数之和" aria-hidden="true">#</a> 18. 四数之和</h2>`,17),d={href:"https://leetcode.cn/problems/4sum/",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>难度：中等</p><p><strong>方法1：排序+双指针</strong></p><p>本题我一开始的想法是：固定第一个数，然后第二个数和第三个数双指针，满足：</p><p>target-a-b-c in hashmap</p><p>对所以还要一开始将nums存入hashmap。这样发现最终即便是找到了一个正确答案，还是不能同时 l+= 1, r-=1，因为d此时是变化的，仅仅l+=1或者r-=1也可能是对的。</p><p>再回想上一题发现，双指针得固定其他所有数，只剩余两个来使用双指针，基于这个思路，<strong>固定第一个数和第二个数，第三个和第四个数使用双指针来完成</strong>。</p><p>时间复杂度：O(nlogn+n^3)</p><p>空间复杂度：O(1)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 固定第一个数</span>
            a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> a <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>  <span class="token comment"># 第一个数去重</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 固定第二个数</span>
                b <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token keyword">if</span> j <span class="token operator">&gt;</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">and</span> b <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>  <span class="token comment"># 第二个数去重</span>

                l <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>
                r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
                <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>  <span class="token comment"># 剩余两个数使用双指针</span>
                    c <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>
                    d <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>
                    <span class="token keyword">if</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">==</span> target<span class="token punctuation">:</span>
                        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">]</span><span class="token punctuation">)</span>
                        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token keyword">and</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">:</span> l <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 第三个数去重</span>
                        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token keyword">and</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> d<span class="token punctuation">:</span> r <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 第四个数去重</span>
                    <span class="token keyword">elif</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                        l <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        r <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-移除元素" tabindex="-1"><a class="header-anchor" href="#_27-移除元素" aria-hidden="true">#</a> 27. 移除元素</h2>`,10),v={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>难度：简单</p><p><strong>方法1：双指针</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> right <span class="token operator">&gt;=</span> left <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> left
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function y(h,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("题目："),n("a",r,[s("15. 三数之和"),p(a)])]),k,n("p",null,[s("题目："),n("a",d,[s("18. 四数之和"),p(a)])]),m,n("p",null,[s("题目："),n("a",v,[s("27. 移除元素"),p(a)])]),b])}const f=e(u,[["render",y],["__file","double_pointer.html.vue"]]);export{f as default};
