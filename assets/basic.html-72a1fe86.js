import{_ as t,o as l,c as s,e as i}from"./app-aa9cafec.js";const e="/MLblogs/assets/2024-10-04-21-52-57-image-97945029.png",n="/MLblogs/assets/2024-10-05-12-46-11-image-61c4c1cf.png",o="/MLblogs/assets/2024-10-05-12-47-12-image-cc3f208c.png",a="/MLblogs/assets/2024-10-05-15-16-21-image-000bcce2.png",c="/MLblogs/assets/2024-10-05-16-19-30-image-ccf5df65.png",r={},g=i('<img src="'+e+'" title="" alt="" data-align="center"><h2 id="内存分区" tabindex="-1"><a class="header-anchor" href="#内存分区" aria-hidden="true">#</a> 内存分区</h2><p>java虚拟机内存分为：栈，堆，方法区</p><img src="'+n+'" title="" alt="" data-align="center"><img src="'+o+'" title="" alt="" data-align="center"><img src="'+a+'" title="" alt="" data-align="center"><p><strong>malloc和new都是用来申请堆空间的。</strong></p><p>在C++中，内存主要分为栈区和堆区：</p><ul><li><p><strong>栈区：</strong></p><ul><li>由<strong>编译器自动分配和释放</strong>，存放函数的参数、局部变量、返回值等。</li><li><strong>栈区内存分配速度快，但空间有限</strong>，且遵循后进先出的原则。</li><li>栈上的变量在函数结束时自动释放。</li></ul></li><li><p><strong>堆区：</strong></p><ul><li>由<strong>程序员手动申请和释放</strong>，一般用于动态内存分配。</li><li><strong>堆区空间较大</strong>，但分配和释放速度较慢。</li><li>堆上的内存需要程序员手动使用<code>delete</code>或<code>free</code>释放，否则会造成内存泄漏。</li></ul></li></ul><p>堆的优点？</p><ul><li><strong>灵活性：</strong> 堆上内存的分配和释放由程序员控制，可以根据需要动态调整内存大小。</li><li><strong>大块内存：</strong> 当需要分配大块内存时，通常使用堆。</li><li><strong>生命周期长：</strong> 堆上的内存可以一直存在，直到程序结束或手动释放。</li></ul><p>堆和栈在程序执行中的分配流程：</p><ul><li><p>运行程序，在方法区里存好public类的相关信息：代码，静态变量，静态方法，字符串常量</p></li><li><p>运行到public类的main方法后，会在栈内为该方法开辟一个栈帧，如果在该方法内还有新建别的对象，那么会在该栈帧内保存 变量名-地址，地址是该对象实际在堆中开辟的内存地址，即保证二者关联起来。</p></li><li><p>只要运行到新的方法，就会在栈中开辟方法的栈帧，然后剩余的和第二步一样</p></li></ul><img src="'+c+'" title="" alt="" data-align="center">',14),p=[g];function _(d,m){return l(),s("div",null,p)}const f=t(r,[["render",_],["__file","basic.html.vue"]]);export{f as default};
