import{_ as a,o as r,c as t,a as e,e as i}from"./app-aa9cafec.js";const n={},o=e("div",{class:"custom-container info"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"INFO"),e("p",null,"《深度学习推荐系统》王喆")],-1),h=i('<h2 id="推荐系统如何选取和处理特征" tabindex="-1"><a class="header-anchor" href="#推荐系统如何选取和处理特征" aria-hidden="true">#</a> 推荐系统如何选取和处理特征</h2><p><strong>特征工程的原则</strong>：</p><blockquote><p>特征的本质是对某个行为过程相关信息的抽象表达，从具体行为到抽象特征，这一过程必然有信息损失，所以构建特征工程的原则是：尽可能抽取的特征能保留推荐环境与用户行为过程中所有有用的信息，尽量摒弃冗余信息。</p><p>比如一个电影推荐场景中，如何抽取特征才能代表“用户点击某个电影”的行为？需要置身于场景中，想想自己点击某个电影受哪些因素的影响。在已有的、可获得的数据基础上，尽量保留有用信息是一个显示的工程上的原则。</p></blockquote><p><strong>常用特征</strong>：</p><blockquote><ul><li><p>用户行为数据。点赞、评分、收藏转发等。</p><p>如何处理该类特征？一种是将代表用户行为的物品id转换为multi-hot向量，将其作为特征向量；一种是预先训练好物品的embeddings，再通过平均或DIN模型的加权平均的方式生成历史行为的embeddings。</p></li><li><p>用户关系数据。</p></li><li><p>属性、标签类数据。一般是直接描述用户或者物品的特征。</p></li><li><p>内容类数据。大段文字、图片、视频。</p></li><li><p>上下文信息。如时间、地点、季节、月份、节假日等</p></li><li><p>统计类特征。通过统计方法计算出的特征，如历史CTR、历史CVR、物品热门程度、物品流行程度。仅经过归一化处理就可以直接输入推荐进行训练。</p></li><li><p>组合类特征。将不同特征组合后生成的新特征。早期推荐系统中，推荐模型（如逻辑回归）不具备特征组合能力，后来深度学习推荐系统可以自动处理组合类特征。</p></li></ul></blockquote><p><strong>常用的特征处理方法</strong>：</p><blockquote><p>连续性特征：如年龄、历史CTR等。<strong>归一化</strong>：统一各个特征的量纲；<strong>离散化</strong>：将原来的连续值分桶，最终行成离散值。其目的是防止连续值带来的过拟合现象以及特征值分布不均匀的情况；<strong>非线性函数</strong>：如log()，更好地捕获特征和优化目标之间的非线性关系，增强这个模型的非线性表达能力。</p><p>类别型特征：使用one-hot编码。one-hot编码的主要问题是维度过大，特征稀疏，容易造成模型的欠拟合，模型的权重参数过多，导致模型收敛过慢。所以做法是先将类别型特征编码成稠密embeddings，再和其他特征向量结合。</p></blockquote><h2 id="召回层的主要策略" tabindex="-1"><a class="header-anchor" href="#召回层的主要策略" aria-hidden="true">#</a> 召回层的主要策略</h2><h2 id="推荐系统的实时性的重要性-如何提高实时性" tabindex="-1"><a class="header-anchor" href="#推荐系统的实时性的重要性-如何提高实时性" aria-hidden="true">#</a> 推荐系统的实时性的重要性？如何提高实时性？</h2><h2 id="如何根据具体场景构建推荐模型的优化目标" tabindex="-1"><a class="header-anchor" href="#如何根据具体场景构建推荐模型的优化目标" aria-hidden="true">#</a> 如何根据具体场景构建推荐模型的优化目标</h2><h2 id="如何基于用户动机改进模型结构" tabindex="-1"><a class="header-anchor" href="#如何基于用户动机改进模型结构" aria-hidden="true">#</a> 如何基于用户动机改进模型结构</h2><h2 id="冷启动问题的解决方法" tabindex="-1"><a class="header-anchor" href="#冷启动问题的解决方法" aria-hidden="true">#</a> 冷启动问题的解决方法</h2><p>冷启动问题：在缺乏有价值数据的时候，如何进行有效的推荐被称为“冷启动问题”</p><p>冷启动分类：<strong>用户冷启动</strong>，新用户注册，没有历史行为数据；<strong>物品冷启动</strong>，新物品加入后，没有交互记录时，如何将其推荐给用户；<strong>系统冷启动</strong>，推荐系统运行之初，缺乏所有相关历史数据时的推荐。</p><h3 id="基于规则的冷启动" tabindex="-1"><a class="header-anchor" href="#基于规则的冷启动" aria-hidden="true">#</a> 基于规则的冷启动：</h3><p>用户冷启动场景：使用“热门榜单”“最近流行趋势”“最高评分”等作为默认推荐列表，完成用户冷启动。</p><p>物品冷启动场景：找到该物品的相似物品，利用相似物品的意见逻辑完成物品的冷启动过程。</p><p>制定冷启动规则的时候，需要充分了解公司的业务特点，充分利用已有的数据，让冷启动更加高效。</p><h3 id="丰富冷启动过程中可获得的用户和物品特征" tabindex="-1"><a class="header-anchor" href="#丰富冷启动过程中可获得的用户和物品特征" aria-hidden="true">#</a> 丰富冷启动过程中可获得的用户和物品特征</h3><p>在模型中加入更多用户或者物品的属性特征，而非历史行为特征，推荐系统仍然可以凭借用户的属性特征完成粗粒度的推荐。</p><p>比如：用户注册信息（年龄、性别、学历、IP、职业等）、第三方数据管理平台提供用户信息（如收入水平、兴趣爱好等）、物品内容特征、引导用户进入冷启动特征（如选择音乐风格）</p><h3 id="主动学习" tabindex="-1"><a class="header-anchor" href="#主动学习" aria-hidden="true">#</a> 主动学习</h3><p>被动学习是在已有数据集上建模，学习过程不会修改数据，不会加入新数据；主动学习利用已有数据建模，可以“主动”发现哪些数据时最急需的，主动向外界询问，获得反馈。</p><h3 id="迁移学习" tabindex="-1"><a class="header-anchor" href="#迁移学习" aria-hidden="true">#</a> 迁移学习</h3><p>在某领域知识不足的情况下，迁移其他领域的数据或知识用于本领域的学习。比如ESSM模型，利用CTR数据生成了用户和物品的embeddings，然后共享给CVR模型，这也是一个迁移学习的思路，是的CVR模型在没有转化数据时能用CTR模型的知识完成冷启动过程。</p><h3 id="探索和利用机制" tabindex="-1"><a class="header-anchor" href="#探索和利用机制" aria-hidden="true">#</a> 探索和利用机制</h3><p>在探索新数据和利用旧数据之间平衡。</p>',27),s=[o,h];function d(c,l){return r(),t("div",null,s)}const u=a(n,[["render",d],["__file","multi-view-on-recsys.html.vue"]]);export{u as default};
