import{_ as t,r as o,o as c,c as l,a as n,b as s,d as p,e}from"./app-aa9cafec.js";const i="/MLblogs/imgs/2023-08-09-11-35-58-image.png",u="/MLblogs/imgs/2023-08-09-11-51-32-image.png",r="/MLblogs/imgs/2023-08-09-12-10-47-image.png",k="/MLblogs/imgs/2023-08-09-12-12-51-image.png",d="/MLblogs/imgs/2023-08-09-12-34-12-image.png",m="/MLblogs/imgs/2023-08-09-12-40-10-image.png",b="/MLblogs/imgs/2023-08-09-12-41-25-image.png",v="/MLblogs/imgs/2023-08-09-12-45-37-image.png",g={},h=e('<h2 id="目标检测后处理-nms-vs-wbf" tabindex="-1"><a class="header-anchor" href="#目标检测后处理-nms-vs-wbf" aria-hidden="true">#</a> 目标检测后处理：NMS vs WBF</h2><p>https://mp.weixin.qq.com/s/fsByXBrTWaWBDR-FjhHwnA</p><h2 id="卷积核的基本情况" tabindex="-1"><a class="header-anchor" href="#卷积核的基本情况" aria-hidden="true">#</a> 卷积核的基本情况：</h2><p>https://mp.weixin.qq.com/s/N0QGAufQZvC_l-6BLmlR9A</p><h2 id="cnn网络结构的发展——看懂这一篇就够了" tabindex="-1"><a class="header-anchor" href="#cnn网络结构的发展——看懂这一篇就够了" aria-hidden="true">#</a> CNN网络结构的发展——看懂这一篇就够了</h2>',5),_={href:"https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&mid=2247608797&idx=5&sn=520b70c5855c4f2118ea0a4077eef0b8&chksm=fb54cb31cc2342272bc2fd09cc3189a674188c5856219e259c2a760e204428cce6879c154d68&mpshare=1&scene=1&srcid=0727391w60i9HZP2nA36gqzn&sharer_sharetime=1690444376981&sharer_shareid=f48d477bdc57653f558f1018c59d93fe#rd",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="cnn神经网络结构的概览" tabindex="-1"><a class="header-anchor" href="#cnn神经网络结构的概览" aria-hidden="true">#</a> CNN神经网络结构的概览！</h2><p>https://mp.weixin.qq.com/s/4OwdMuH5ng7DEYV4pUcWLg</p><h2 id="如何理解那个把嫦娥送上天的卡尔曼滤波算法kalman-filter" tabindex="-1"><a class="header-anchor" href="#如何理解那个把嫦娥送上天的卡尔曼滤波算法kalman-filter" aria-hidden="true">#</a> 如何理解那个把嫦娥送上天的卡尔曼滤波算法Kalman filter?</h2><p>https://mp.weixin.qq.com/s/hdLGJB4gKksu4PfZgw8Zag</p><h2 id="gpt模型成功的背后用到了哪些以数据为中心的人工智能-data-centric-ai-技术" tabindex="-1"><a class="header-anchor" href="#gpt模型成功的背后用到了哪些以数据为中心的人工智能-data-centric-ai-技术" aria-hidden="true">#</a> GPT模型成功的背后用到了哪些以数据为中心的人工智能（Data-centric AI）技术？</h2><p>https://mp.weixin.qq.com/s/GWc_DXRdsHHDbEjE6by3uQ</p><h2 id="padding-在深度学习模型中重要吗" tabindex="-1"><a class="header-anchor" href="#padding-在深度学习模型中重要吗" aria-hidden="true">#</a> padding 在深度学习模型中重要吗？</h2><p>https://mp.weixin.qq.com/s/5PXsqPuW0_LlLeUI67gL1Q</p><h2 id="深度学习的多个loss如何平衡" tabindex="-1"><a class="header-anchor" href="#深度学习的多个loss如何平衡" aria-hidden="true">#</a> 深度学习的多个loss如何平衡？</h2><p>https://mp.weixin.qq.com/s/hbgcoIOnu7-vPPkybwFRiw</p><h2 id="决策树算法的原理-接地气版" tabindex="-1"><a class="header-anchor" href="#决策树算法的原理-接地气版" aria-hidden="true">#</a> 决策树算法的原理（接地气版）</h2><p>https://mp.weixin.qq.com/s/QXgEYjqxSZEWxs7U06XlWA</p><h2 id="使用pytorch调用sklearn模型并训练" tabindex="-1"><a class="header-anchor" href="#使用pytorch调用sklearn模型并训练" aria-hidden="true">#</a> 使用pytorch调用sklearn模型并训练</h2><p>这个问题是通过问ChatGPT找到答案的。我问了两个问题：</p><blockquote><p>我现在使用pytorch写了一个模型Net，该模型的功能是：输入一张图片可以对该图片进行类别分类，但是我希望在该模型的内部调用sklearn的SVM函数，来先对该图片的特征向量进行二分类（是背景还是前景），然后再对前景分类属于哪个一个类别，如何实现？</p></blockquote><p>回答如下：</p><blockquote><p>在PyTorch模型内部调用Scikit-learn的SVM函数需要进行一些额外的步骤，因为PyTorch和Scikit-learn是两个独立的库，它们的张量和数据类型不兼容。为了实现这一功能，你可以按照以下步骤进行：</p><ol><li>在PyTorch模型内部，提取图片的特征向量作为SVM的输入。</li><li>使用Scikit-learn训练一个二分类的SVM模型，用于将特征向量分为背景和前景。</li><li>使用得到的前景样本的特征向量再训练一个多类别分类器（例如逻辑回归、SVM或其他分类算法），用于将前景样本分为不同的类别。</li></ol></blockquote><p>然后给了一段代码，代码中就是将一个resnet参数固定住(model.eval())，然后将从model出来的特征转为numpy张量，再训练SVM。</p><p>那我要是希望协同训练pytorch模型和sklearn模型呢？</p><blockquote><p>你代码里是固定resnet的参数，单独训练SVM，但是我希望二者协同训练，如何实现?</p></blockquote><p>回答如下：</p><blockquote><p>对于需要在训练中同时优化PyTorch模型和Scikit-learn SVM的情况，我们可以使用一种迭代训练的方法，称为“交替优化”或“交替训练”。在这种方法中，我们交替训练模型的参数和SVM的参数，以实现二者的协同训练。具体步骤如下：</p><ol><li>初始化PyTorch模型和Scikit-learn SVM的参数。</li><li>将PyTorch模型的输出作为SVM的输入，训练SVM进行二分类（前景和背景）。</li><li>使用SVM的预测结果（前景样本）作为标签，继续训练PyTorch模型，同时保持SVM参数不变。</li><li>重复步骤2和3，直到模型收敛或达到一定的迭代次数。</li></ol><p>以下是一个简化的示例代码，用于演示如何实现交替训练：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">as</span> models
<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC

<span class="token comment"># 加载PyTorch预训练模型</span>
<span class="token keyword">def</span> <span class="token function">load_pretrained_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    model <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet18<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    model<span class="token punctuation">.</span>fc <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>  <span class="token comment"># 替换最后一层全连接层</span>
    <span class="token keyword">return</span> model

<span class="token comment"># 定义数据预处理函数</span>
<span class="token keyword">def</span> <span class="token function">preprocess_image</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    preprocess <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>
        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&quot;RGB&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> preprocess<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># 加载图片</span>
image_path <span class="token operator">=</span> <span class="token string">&quot;path_to_your_image.jpg&quot;</span>
image_tensor <span class="token operator">=</span> preprocess_image<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>

<span class="token comment"># 加载预训练模型</span>
num_classes <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token comment"># 这里假设预训练模型有1000个类别输出</span>
model <span class="token operator">=</span> load_pretrained_model<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 使用预训练模型提取特征向量</span>
model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    feature_vector <span class="token operator">=</span> model<span class="token punctuation">(</span>image_tensor<span class="token punctuation">)</span>

<span class="token comment"># 初始化SVM</span>
svm_model <span class="token operator">=</span> SVC<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">&#39;linear&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 迭代优化</span>
num_epochs <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Step 1: 在每个epoch开始前，冻结SVM的参数</span>
    svm_model<span class="token punctuation">.</span>freeze_params<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Step 2: 使用SVM进行前景/背景分类</span>
    feature_vector_np <span class="token operator">=</span> feature_vector<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    svm_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>feature_vector_np<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>  <span class="token comment"># labels是前景/背景的标签</span>

    <span class="token comment"># Step 3: 使用SVM的预测结果作为标签，继续训练PyTorch模型</span>
    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
    output <span class="token operator">=</span> model<span class="token punctuation">(</span>image_tensor<span class="token punctuation">)</span>
    loss <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>output<span class="token punctuation">,</span> svm_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>feature_vector_np<span class="token punctuation">)</span><span class="token punctuation">)</span>
    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 最后可以使用训练好的PyTorch模型对前景样本进行分类</span>
<span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="训练时参数未更新" tabindex="-1"><a class="header-anchor" href="#训练时参数未更新" aria-hidden="true">#</a> 训练时参数未更新</h2><p>假设一个网络<code>classifier</code>，训练过程中参数未更新，常见的问题以及检查方向：</p><p><strong>对于分布式训练：</strong></p><p>如果在多卡训练中，确保你的模型的某个部分（如<code>classifier</code>）没有计算梯度，可以尝试以下几个步骤来解决：</p><ol><li><p>确保<code>classifier</code>在模型中的定义和使用都没有问题。检查<code>classifier</code>的参数是否需要计算梯度，并且在计算损失时是否正确地使用了<code>classifier</code>的输出。</p></li><li><p>检查<code>classifier</code>的定义是否正确添加到了优化器的参数组中。在多卡训练中，需要将所有需要计算梯度的参数都添加到优化器中。可以使用<code>model.parameters()</code>来获取所有模型参数，并在优化器中添加。</p></li><li><p>确保在调用<code>backward()</code>方法计算梯度之前，梯度计算没有被<code>detach()</code>。<code>detach()</code>操作会断开梯度计算，导致梯度无法传播到<code>classifier</code>。确保计算损失时，没有对某些部分使用了<code>detach()</code>操作。</p></li><li><p>检查<code>classifier</code>是否正确地添加到了<code>DistributedDataParallel</code>中，并且是否使用了正确的设备编号。在多卡训练中，<code>DistributedDataParallel</code>需要正确地分发模型和梯度。</p></li><li><p>确保在计算损失时，数据和模型的计算都在正确的设备上。使用<code>.to(device)</code>方法将数据和模型转移到正确的设备上。</p></li><li><p>如果以上方法都没有解决问题，可以尝试在<code>DistributedDataParallel</code>中设置<code>find_unused_parameters=True</code>，这样可以忽略一些未被使用的参数，例如：</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>parallel<span class="token punctuation">.</span>DistributedDataParallel<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device_ids<span class="token operator">=</span><span class="token punctuation">[</span>local_rank<span class="token punctuation">]</span><span class="token punctuation">,</span> find_unused_parameters<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在设置<code>find_unused_parameters=True</code>时，需要确保其他部分的梯度计算没有问题，并且该设置只是为了解决特定的未计算梯度的问题。</p><p>请注意，调试多卡训练中的梯度计算问题可能会比较复杂，可能需要仔细检查模型定义、数据处理和优化器设置等多个方面。建议逐步尝试上述方法，并检查每一步是否解决了问题。如果问题仍然存在，可以尝试通过输出中间变量等方式来进一步调试和定位问题所在。</p><p><strong>对于单卡训练：</strong></p><p>如果在单卡训练中，你发现<code>classifier</code>没有梯度，那么问题可能在于以下几个方面：</p><ol><li><p><strong>检查<code>classifier</code>的参数是否需要计算梯度：</strong> 确保在定义<code>classifier</code>时，其参数被设置为需要计算梯度。PyTorch中，默认情况下，所有模型的参数都是需要计算梯度的，除非你显式地设置为不需要计算梯度。可以通过设置参数的<code>requires_grad</code>属性来控制是否计算梯度，例如：<code>classifier.weight.requires_grad = True</code>。</p></li><li><p><strong>检查<code>classifier</code>是否正确地添加到了优化器中：</strong> 确保在定义优化器时，将<code>classifier</code>的参数加入到优化器中。在单卡训练中，可以简单地使用<code>model.parameters()</code>获取所有模型参数，并添加到优化器中。</p></li><li><p><strong>确保在计算损失时没有使用<code>detach()</code>操作：</strong> 在计算损失时，确保没有对某些部分使用了<code>detach()</code>操作。<code>detach()</code>操作会断开梯度计算，导致梯度无法传播到<code>classifier</code>。确保计算损失时，没有对<code>classifier</code>的输出或中间变量使用了<code>detach()</code>操作。</p></li><li><p><strong>确保在调用<code>backward()</code>方法之前，没有对梯度进行<code>detach()</code>：</strong> 在调用<code>backward()</code>方法计算梯度之前，确保梯度计算没有被<code>detach()</code>。<code>detach()</code>操作会断开梯度计算，导致梯度无法传播到<code>classifier</code>。确保在需要计算梯度时，没有对梯度进行了<code>detach()</code>操作。</p></li><li><p><strong>检查模型的其他部分是否正确计算梯度：</strong> 在单卡训练中，如果其他部分的梯度计算没有问题，而<code>classifier</code>的梯度计算有问题，那么可能是在模型定义或优化器设置上出现了问题。</p></li><li><p><strong>确认是否正确设置了模型的输入和目标：</strong> 确保在计算损失时，正确设置了模型的输入和目标，并且输入的数据和模型的计算在同一个设备上。</p></li></ol><p>如果在单卡训练中仍然无法解决<code>classifier</code>没有梯度的问题，建议逐步检查模型定义、优化器设置以及损失函数的计算过程，并尝试输出中间变量来进一步调试和定位问题所在。</p><h2 id="momentum用在bn上还是bias上更好" tabindex="-1"><a class="header-anchor" href="#momentum用在bn上还是bias上更好" aria-hidden="true">#</a> momentum用在bn上还是bias上更好</h2><p>在实践中，通常将<code>momentum</code>应用在Batch Normalization（BN）的<code>weight</code>上比应用在<code>bias</code>上更为常见和推荐。</p><ol><li><p><strong>Momentum on BN <code>weight</code>:</strong> 在BN层中，<code>weight</code>参数对应着缩放因子，它可以调整每个特征的规模。通过应用<code>momentum</code>在<code>weight</code>上，可以让模型在训练过程中逐渐学习合适的特征缩放。这样做通常可以提高模型的收敛速度和稳定性。</p></li><li><p><strong>Momentum on <code>bias</code>:</strong> 在BN层中，<code>bias</code>参数对应着偏移量，它可以调整每个特征的平均值。应用<code>momentum</code>在<code>bias</code>上可以使模型逐渐学习适当的特征平均值。然而，在实践中很少将<code>momentum</code>应用在BN的<code>bias</code>上，因为通常在使用BN时，数据已经被标准化，<code>bias</code>参数的影响相对较小。</p></li></ol><p>总的来说，通常建议将<code>momentum</code>应用在BN层的<code>weight</code>上，而不是<code>bias</code>上。但是，这并不是绝对的，根据不同的模型和任务，有时也可能会对<code>bias</code>应用<code>momentum</code>。最佳的设置可能因模型结构和数据集而异，建议在特定任务中进行实验来找到最适合的参数设置。</p><h2 id="常见的会导致梯度无法传播的操作" tabindex="-1"><a class="header-anchor" href="#常见的会导致梯度无法传播的操作" aria-hidden="true">#</a> 常见的会导致梯度无法传播的操作</h2><p>在PyTorch中，有一些常见的操作可能会导致梯度无法顺利传播或产生数值不稳定的问题。以下是一些可能导致问题的操作：</p><ol><li><p><strong>不可导操作：</strong> 某些操作可能是不可导的，例如<code>torch.max()</code>，它是一个非连续的操作，不具有可导性。这些不可导操作会导致梯度无法传播。</p></li><li><p><strong>in-place操作：</strong> 使用像<code>x += y</code>这样的原地(in-place)操作会覆盖原始的<code>x</code>，从而导致梯度无法正确地传播。通常应该避免使用原地操作，可以使用<code>x = x + y</code>这样的代替。</p></li><li><p><strong>比较操作：</strong> 使用比较操作符如<code>&gt;</code>、<code>&lt;</code>等会返回布尔值，而布尔值是不可导的。如果将这些布尔值作为损失函数的输入，梯度无法传播到之前的层。</p></li><li><p><strong>数值不稳定操作：</strong> 在深度学习中，有些操作可能会导致数值不稳定，例如指数函数<code>torch.exp()</code>，如果其输入非常大，可能会导致溢出。数值不稳定的操作可能会导致梯度消失或爆炸。</p></li><li><p><strong>非标量损失：</strong> 一些损失函数可能会返回非标量的张量，这会导致反向传播时无法得到有效的梯度。</p></li><li><p><strong>自定义操作：</strong> 如果你在模型中使用了自定义的操作或函数，需要确保这些操作是可导的，并且正确处理了梯度计算。</p></li></ol><p>为了确保梯度顺利传播，建议遵循以下几点：</p><ul><li><p>使用PyTorch提供的可导操作和损失函数，这些函数已经被正确实现并能够正确地处理梯度计算。</p></li><li><p>避免使用不可导操作和原地操作，尽可能使用PyTorch提供的替代方法。</p></li><li><p>检查模型和损失函数的输入输出，确保它们都是标量（scalar），以便能够正确计算梯度。</p></li><li><p>注意数值不稳定的操作，可以使用稳定的实现或数值技巧来避免问题。</p></li><li><p>在自定义操作时，确保正确地实现了前向和反向传播，并且处理了梯度计算。</p></li></ul><h2 id="直观理解常用的分类评价指标" tabindex="-1"><a class="header-anchor" href="#直观理解常用的分类评价指标" aria-hidden="true">#</a> 直观理解常用的分类评价指标</h2>`,44),f={href:"https://www.bilibili.com/video/BV1Rc411c7US/?spm_id_from=888.80997.embed_other.whitelist",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.wolai.com/stupidccl/kdRW2EwWtJ4qN3MnTjgKCR",target:"_blank",rel:"noopener noreferrer"},x=e(`<blockquote><ul><li>评价指标是针对将相同的数据，输入不同的算法模型，或者输入不同参数的同一种算法模型，而给出这个算法或者参数好坏的定量指标。</li><li>在模型评估过程中，往往需要使用多种不同的指标进行评估，在诸多的评价指标中，大部分指标只能片面的反应模型的一部分性能，如果不能合理的运用评估指标，不仅不能发现模型本身的问题，而且会得出错误的结论</li></ul></blockquote><h3 id="准确率" tabindex="-1"><a class="header-anchor" href="#准确率" aria-hidden="true">#</a> 准确率</h3><p>📌 准确率：预测正确的结果占总样本的百分比</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样本不平衡的时候，准确率失效。如：比如判断浏览购物网站是否会购买，100个浏览用户也许只有1个会购买，那么模型无脑拍不会购买，准确率有99%</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣ <strong>处理样本不平衡</strong> ：重采样、欠采样、过采样 等</p><p>2️⃣ <strong>更换合适指标</strong>： F1-Score ，它不仅考虑模型预测的错误数量，还考虑错误类型</p><h3 id="混淆矩阵" tabindex="-1"><a class="header-anchor" href="#混淆矩阵" aria-hidden="true">#</a> 混淆矩阵</h3><p><strong>看对角线</strong></p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>pip install scikit-plot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> scikitplot <span class="token keyword">as</span> skplt
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>
skplt<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>plot_confusion_matrix<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="`+i+`" title="" alt="" data-align="center"></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> scikitplot <span class="token keyword">as</span> skplt
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits

X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_digits<span class="token punctuation">(</span>return_X_y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
clf <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
pred <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>

skplt<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>plot_confusion_matrix<span class="token punctuation">(</span>y<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="`+u+'" title="" alt="" data-align="center"></div><h2 id="准确率、召回率、f1-score" tabindex="-1"><a class="header-anchor" href="#准确率、召回率、f1-score" aria-hidden="true">#</a> 准确率、召回率、F1 score</h2><ul><li>真正例 (True Positive, <strong>TP</strong>)：被模型预测正确，预测为正样本；</li><li>假正例 (False Positive, <strong>FP</strong>)：被模型预测错误，预测为正样本；</li><li>假负例 (False Negative, <strong>FN</strong>)：被模型预测错误，预测为负样本；</li><li>真负例 (True Negative, <strong>TN</strong>)：被模型预测正确，预测为负样本；</li></ul><div align="center"><img src="'+r+'" title="" alt="" data-align="center"></div><ul><li><p><strong>Precision</strong>= TP/(TP+FP)</p><div align="center"><img src="'+k+`" title="" alt="" data-align="center"></div><p><strong>模型预测为1，真正是1所占的百分比</strong></p><ul><li>在预测股票的时候，我们更关心精准率，即我们预测升的那些股票里，真的升了有多少，因为那些我们预测升的股票都是我们投钱的。</li><li>比如对于罪犯的预测，我们希望预测结果是非常准确的，即使<strong>放过了一些真正的罪犯，也不能错怪一个好人</strong>（这个例子很奇怪，看最后一句话似乎是T为好人，F为罪犯）</li></ul><p>【<strong>专注正类</strong>，模型说涨，就一定涨，模型就越<strong>精准</strong>】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> precision_score
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

precision_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>

precision_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;macro&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># (0.375 + 1.)/2</span>

precision_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;weighted&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 0.375*0.3+1*0.7</span>

precision_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;micro&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 等于Accuracy</span>
accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Recall</strong>=TP/(TP+FN)</p><p>这个是查全率，分母是TP+FN（模型预测错了，预测为负例），越大越好，为的是让模型能将正例尽可能找出来。</p><div align="center"><img src="`+d+`" title="" alt="" data-align="center"></div><p><strong>真是1的样本，再次被模型召回</strong>的概率，也叫<strong>查全率</strong></p><ul><li>假如一共发生了10次地震，我们情愿发出1000次警报，这样能把这10次地震都涵盖进去（此时recall是100%，precision是1%），也不要发出100次警报，其中有8次地震给预测到了，但漏了2次（此时recall是80%，precision是8%）</li><li>而在预测病患的场景下，我们更关注<strong>召回率</strong>，即真的患病的那些人里我们预测错了情况应该越少越好，因为真的患病如果没有检测出来，结果其实是很严重的，之前那个无脑的算法，召回率就是 0。</li><li>在股票预测的场景里，我们不期望每一次上涨都被抓到（也就是不希望每天都能猜对），而是希望通过最有把握的那些形态，那些事件发生的时候，能够发出上涨信号，而发出上涨信号后，大概率上涨</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> recall_score
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

recall_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 3个0都被召回了，7个1只有2个被召回</span>

recall_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;macro&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># (1. + 0.28571429)/2</span>

recall_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;weighted&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 1*0.3+0.28571429*0.7</span>

recall_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;micro&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 等于Accuracy</span>
accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣ 如果想要更高的recall，那么就要让模型的预测能覆盖到更多的样本，但是这样模型就更有可能犯错，也就是说precision会比较低。</p><p>2️⃣ 如果模型很保守，只能检测出它很确定的样本，那么其precision会很高，但是recall会相对低。</p></li><li><p><strong>F1 score</strong>=2*(P * R)/(P+R)</p><p>调和平均数：</p><div align="center"><img src="`+m+'" title="" alt="" data-align="center"></div><p>例子：</p><div align="center"><img src="'+b+'" title="" alt="" data-align="center"></div><p>公式：</p><div align="center"><img src="'+v+`" title="" alt="" data-align="center"></div><p>为何使用调和平均？</p><ul><li>如果简单平均，P=0.8,R=0.8与P=0.7,R=0.9的算术平均一样都是0.8，类似预测与召回是可替代的。</li><li>调和平均相当于添加了惩罚机制：越高的数值给越低的权重（比如上面例子中，20速度的权重只有33%） 从而避免在使用算术平均时，出现由于其中一个很高，另一个较低，造成的均值虚高的现象。（假设p和r一个是1.0一个是0.1,算术平均会接近0.5 而调和平均接近0.2） F1值背后的思想就是，precision和recall二者都平平的算法比一个指标巨好另一个指标巨差的算法靠谱</li></ul><p>代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> f1_score
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

f1_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>

f1_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;macro&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># (0.54545455+0.44444444)/2</span>

f1_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;weighted&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 0.54545455*0.3+0.44444444*0.7</span>

f1_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;micro&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 等于Accuracy</span>
accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="测试时数据增强" tabindex="-1"><a class="header-anchor" href="#测试时数据增强" aria-hidden="true">#</a> 测试时数据增强</h2><p>在预测的时候使用数据增强，通常被称为测试时的数据增强（Test-Time Augmentation, TTA）。主要目的是为了<strong>提高模型在新数据上的表现</strong>，<strong>提高预测结果的稳定性和精确性</strong>。</p><p>测试时的数据增强会对输入图像应用不同种类的增强技术（如旋转、翻转、缩放等），从而生成多个变种图像。然后，模型分别<strong>对这些变种图像进行预测，最终将这些预测结果进行合并（例如，通过投票或平均）来得出最终的预测结果</strong>。这样做的效果提升主要体现在：1. 增加鲁棒性：对同一图像的不同变种进行预测，可以减少单一图像中噪声或者特定视角、光照条件对预测结果的影响。2. 提升精确度：不同的变种可能包含有助于更好地识别目标的信息，通过结合这些信息可以提高预测结果</p>`,22);function T(q,P){const a=o("ExternalLinkIcon");return c(),l("div",null,[h,n("p",null,[n("a",_,[s("CNN网络结构的发展——看懂这一篇就够了 (qq.com)"),p(a)])]),y,n("p",null,[s("视频链接："),n("a",f,[s("直观理解常用分类评估指标"),p(a)])]),n("p",null,[s("原文链接："),n("a",w,[s("直观理解常用的分类评价指标"),p(a)])]),x])}const N=t(g,[["render",T],["__file","bk1.html.vue"]]);export{N as default};
