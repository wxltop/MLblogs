import{_ as e,r as o,o as l,c,a as n,b as s,d as t,e as p}from"./app-aa9cafec.js";const i="/MLblogs/assets/2024-02-18-22-09-28-image-8e9bb271.png",u="/MLblogs/assets/2024-02-19-16-47-13-image-cf0ffa00.png",r="/MLblogs/assets/2024-02-19-16-47-58-image-5877e520.png",k={},d=n("h2",{id:"kmp算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kmp算法","aria-hidden":"true"},"#"),s(" KMP算法")],-1),m={href:"https://www.programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E6%80%9D%E8%B7%AF",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.bilibili.com/video/BV1PD4y1o7nd/?vd_source=29624dbb703a504c9a36c90ccf9558d4",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1M5411j7Xx/?vd_source=29624dbb703a504c9a36c90ccf9558d4",target:"_blank",rel:"noopener noreferrer"},h=p('<p>KMP主要应用在字符串匹配上。KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p><h3 id="前后缀与前缀表的填写" tabindex="-1"><a class="header-anchor" href="#前后缀与前缀表的填写" aria-hidden="true">#</a> 前后缀与前缀表的填写</h3><p>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串；</p><p>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</p><p>假设字符串：aabaaf</p><p><strong>前缀</strong>（不包括最后一个字母）：a, aa, aab, aaba, aabaa</p><p><strong>后缀</strong>（不包括第一个字母）：f, af, aaf, baaf, abaaf</p><p>前缀表：统计子串的最长相等前缀表。先初始化为_, _, _, _, _, _</p><p>子串s[: 1] = a, 无前后缀，填表值：0</p><p>子串s[: 2] = aa, 最长相等前后缀为 a, 填表值：1</p><p>子串s[: 3] = aab, 最长相等前后缀为 &#39;&#39;，填表值：0</p><p>子串s[: 4] = aaba, 最长相等前后缀为 a, 填表值：1</p><p>子串s[: 5] = aabaa，最长相等前后缀为 aa, 填表值：2</p><p>子串s[: 6] = aabaaf，最长相等前后缀为 &#39;&#39;，填表值：0</p><h3 id="前缀表的含义" tabindex="-1"><a class="header-anchor" href="#前缀表的含义" aria-hidden="true">#</a> 前缀表的含义</h3><p><strong>前缀表</strong>有什么作用呢？</p><p>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>前缀表的相应的值的含义：比如下图前缀表中的2，表示模式串 aabaa 中最长相同前后缀是aa，长度为2。下图的状态是：此时已经到了文本串的b和模式串的f比较的时刻，但是b!=f，所以模式串中的指针需要往前移，移多少？根据前缀表的值来定。如果此时按暴力解法来做，绿色和蓝色的aa应该再比较一下，但是前缀表的值告诉我们绿色和紫色的aa已经确保相等了，然后因为前面已经比较过了蓝色和紫色的aa，所以绿色和蓝色的aa也是相等的，可以不用比较，直接从模式串的b继续开始比较。</p><img src="'+i+`" title="" alt="" data-align="center"><p>这里做几个假设来加深对前缀表的理解：</p><blockquote><p>假设index=2的位置，文本串和模式串不等。</p><p>此时文本串的指针不用前移，模式串的指针需要根据b的前一个字母，即a的前缀表的值来前移，值=1，含义是能保证:</p><p>模式串[: 1] == 文本串[index-len(模式串[: 1]): index]</p></blockquote><blockquote><p>假设index=3的位置，文本串和模式串不等。</p><p>此时文本串的指针不用前移，模式串的指针需要根据 模式串[index]=a 的前一个字母，即b的前缀表的值来前移，值=0，含义是：模式串要从index=0的位置开始和文本串继续比较。</p></blockquote><blockquote><p>假设index=4的位置，文本串和模式串不等。</p><p>此时文本串的指针不用前移，模式串的指针需要根据 模式串[index]=a 的前一个字母，即a的前缀表的值来前移，值=1，含义是：</p><p>模式串[: 1] == 文本串[index-len(模式串[: 1]): index]</p></blockquote><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><p>构造前缀表：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 表示前缀的第一位</span>
    <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 长度为1的字符串无前后缀</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 表示后缀的第一位</span>
        <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># j &gt; 0因为下面用了j-1</span>
            <span class="token comment"># 若前缀和后缀末位不等，需要跳转前缀指针，这里有两个选择：</span>
            <span class="token comment"># next[i-1] 和next[j-1]，前者是字符串s[: i]的最长相等前后缀</span>
            <span class="token comment"># 如果跳转到这里，其实就是将j减1，最终会陷入死循环：j-1, j+1...</span>
            <span class="token comment"># 所以这是不对的，应该将j跳转到next[j-1]</span>
            j <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  
        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 若前缀和后缀的字符相等</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># j是索引，先+1，得到最长前后缀长度值</span>
        <span class="token builtin">next</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_541-反转字符串2" tabindex="-1"><a class="header-anchor" href="#_541-反转字符串2" aria-hidden="true">#</a> 541. 反转字符串2</h2>`,27),g={href:"https://leetcode.cn/problems/reverse-string-ii/",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>难度：简单</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token number">0</span>
        r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>
            l <span class="token operator">+=</span> <span class="token number">1</span>
            r <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> s

    <span class="token keyword">def</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        lyst <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>
                lyst<span class="token punctuation">[</span>i<span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>lyst<span class="token punctuation">[</span>i<span class="token punctuation">:</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                lyst<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>lyst<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k

        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lyst<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_151-反转字符串中的单词" tabindex="-1"><a class="header-anchor" href="#_151-反转字符串中的单词" aria-hidden="true">#</a> 151. 反转字符串中的单词</h2>`,3),w={href:"https://leetcode.cn/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"难度：中等",-1),_=n("p",null,[n("strong",null,"方法1：双指针")],-1),x=n("p",null,"从s的末尾开始往前遍历，将单词都挑出来放入ans列表，最后将其join输出。",-1),j=n("p",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),M=n("p",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),O=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        begin <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
        end <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">while</span> begin <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> s<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
                    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    end <span class="token operator">=</span> begin
                begin <span class="token operator">-=</span> <span class="token number">1</span>
                end <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                begin <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token comment"># 原来字符串里的第一个单词</span>
        <span class="token keyword">if</span> end <span class="token operator">&gt;</span> begin<span class="token punctuation">:</span>
            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_28-找出字符串中第一个匹配项的下标" tabindex="-1"><a class="header-anchor" href="#_28-找出字符串中第一个匹配项的下标" aria-hidden="true">#</a> 28. 找出字符串中第一个匹配项的下标</h2>`,2),S={href:"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"难度：简单",-1),P=n("p",null,[n("strong",null,"方法1：暴力")],-1),E=n("p",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(mn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"mn"),n("span",{class:"mclose"},")")])])])],-1),K=n("p",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])],-1),q=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            begin <span class="token operator">=</span> i
            <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span> <span class="token keyword">and</span> begin <span class="token operator">-</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span> <span class="token keyword">and</span> haystack<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>begin <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                begin <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> begin <span class="token operator">-</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> i
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：KMP</strong></p>`,2),B=n("p",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m+n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，构造前缀表耗时+遍历文本串耗时")],-1),V=n("p",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mclose"},")")])])]),s(".")],-1),N=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_next</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">:</span>
        next_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span>
        <span class="token comment"># 这里有一个隐藏的赋值语句，表示字符串长度为1时，最长相等前后缀=0，即：</span>
        <span class="token comment"># next_[0] = 0</span>
        i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 前缀指针</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 后缀指针</span>
            <span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 用循环而不是if，因为可能回退多步</span>
                i <span class="token operator">=</span> next_<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 因为有i-1，所以要i &gt; 0</span>
            <span class="token keyword">if</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 先将前缀指针+1，此时i值表示最长相等前后缀长度值</span>
            next_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token keyword">return</span> next_

    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        next_ <span class="token operator">=</span> self<span class="token punctuation">.</span>get_next<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 这内部其实和get_next()函数逻辑一样</span>
            <span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> haystack<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 不相等，则前移前缀指针</span>
                i <span class="token operator">=</span> next_<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

            <span class="token keyword">if</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> haystack<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 前缀指针+1，i表示最长相等前后缀长度值</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 若长度符合要求，返回结果</span>
                <span class="token keyword">return</span> j <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法3：使用index</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> haystack<span class="token punctuation">.</span>index<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>
        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法4：使用find</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_459-重复的子字符串" tabindex="-1"><a class="header-anchor" href="#_459-重复的子字符串" aria-hidden="true">#</a> 459. 重复的子字符串</h2>`,6),F={href:"https://leetcode.cn/problems/repeated-substring-pattern/",target:"_blank",rel:"noopener noreferrer"},I=p(`<p>难度：简单</p><p><strong>方法1：穷举法</strong></p><p>将s的每一个从头开始的子串作为模板串，看s剩余的部分能否由该模板串重复而组成。</p><p>这里省去了一些其他情况：s的长度一定能整除模板串的长度；模板串的长度一定不能超过s的一半。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> j<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            sub_s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span> j<span class="token punctuation">]</span>
            n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sub_s<span class="token punctuation">)</span>
            cnt <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> sub_s <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span> 
                    cnt <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
            <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">//</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：移动字符</strong></p><p>字符串 <code>S</code> 包含一个重复的子字符串，意味着可以多次 “移位和换行”\`字符串，并使其与原始字符串匹配。</p><p>例如：<code>abcabc</code></p><p>移位一次：<code>cabcab</code> 移位两次：<code>bcabca</code> 移位三次：<code>abcabc</code></p><p>现在字符串和原字符串匹配了，所以可以得出结论存在重复的子串。创建一个新的字符串 <code>str</code>，它等于原来的字符串 <code>S</code> 再加上 <code>S</code> 自身，这样其实就包含了所有移动的情况下的字符串，就像一个滑动窗口。</p><p>可以直接判断 <code>str</code> 中去除首尾元素之后，是否包含自身元素。如果包含。则表明存在重复子串。</p><p>这里对ss[1: -1]匹配s，就用到了字符串匹配算法。下面代码使用kmp来求解：</p>`,12),T=n("p",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m+n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(", m=2 x n")],-1),A=n("p",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m+n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),C=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">kmp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        next_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        ss <span class="token operator">=</span> s <span class="token operator">+</span> s
        ss <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment"># initialize next_</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">=</span> next_<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            next_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i

        <span class="token comment"># string matching</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">=</span> next_<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> 
                <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>kmp<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法3：KMP</strong></p>`,2),D={href:"https://www.bilibili.com/video/BV1cg41127fw/?vd_source=29624dbb703a504c9a36c90ccf9558d4",target:"_blank",rel:"noopener noreferrer"},z=p(`<p>这里说的KMP解法不是像上面一样，用s去匹配ss[1: -1]，匹配过程使用KMP，而是利用KMP算法里的最长相等前后缀与重复子串的关系来求解。</p><p>结论：<strong>如果该字符串是由某个子串重复若干次组成，那么其最长相等前后缀所不包含的部分 就是最小重复子串。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token comment"># 先求 next_数组, 这个步骤和KMP一致</span>
    next_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            i <span class="token operator">=</span> next_<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        next_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i

    <span class="token comment"># next_[len(s)-1]是字符串s的最长相等前后缀长度</span>
    <span class="token keyword">if</span> next_<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        sub_s <span class="token operator">=</span> s<span class="token punctuation">[</span>next_<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">]</span>  <span class="token comment"># 除去最长相等前后缀剩余的子串</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sub_s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 若可以被s长度整除</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="右旋字符串" tabindex="-1"><a class="header-anchor" href="#右旋字符串" aria-hidden="true">#</a> 右旋字符串</h2><p>例如，对于输入字符串 &quot;abcdefg&quot; 和整数 2，函数应该将其转换为 &quot;fgabcde&quot;</p><p>一种比较妙的方法：整体倒序+局部倒序</p><img title="" src="`+u+'" alt="" width="255" data-align="center"><img title="" src="'+r+'" alt="" data-align="center" width="245">',8);function W(X,G){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,n("p",null,[n("a",m,[s("代码随想录 (programmercarl.com)"),t(a)])]),n("p",null,[n("a",b,[s("帮你把KMP算法学个通透！（理论篇）_哔哩哔哩_bilibili"),t(a)])]),n("p",null,[n("a",v,[s("帮你把KMP算法学个通透！（求next数组代码篇）_哔哩哔哩_bilibili"),t(a)])]),h,n("p",null,[s("题目："),n("a",g,[s("541. 反转字符串 II"),t(a)])]),y,n("p",null,[s("题目："),n("a",w,[s("151. 反转字符串中的单词"),t(a)])]),f,_,x,j,M,O,n("p",null,[s("题目："),n("a",S,[s("28. 找出字符串中第一个匹配项的下标"),t(a)])]),L,P,E,K,q,B,V,N,n("p",null,[s("题目："),n("a",F,[s("459. 重复的子字符串"),t(a)])]),I,T,A,C,n("p",null,[n("a",D,[s("字符串这么玩，可有点难度！ | LeetCode：459.重复的子字符串_哔哩哔哩_bilibili"),t(a)])]),z])}const J=e(k,[["render",W],["__file","string.html.vue"]]);export{J as default};
