import{_ as p,r as o,o as l,c as i,a as n,b as s,d as t,e as a}from"./app-aa9cafec.js";const c="/MLblogs/assets/2024-02-12-22-11-01-image-47aa4348.png",d="/MLblogs/assets/2024-02-12-22-14-16-image-a9364858.png",r="/MLblogs/assets/2024-02-13-21-57-27-image-c35afa4e.png",u={},k=n("h2",{id:"_203-移除链表元素",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_203-移除链表元素","aria-hidden":"true"},"#"),s(" 203. 移除链表元素")],-1),m={href:"https://leetcode.cn/problems/remove-linked-list-elements/",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>难度：简单</p><p><strong>方法1：虚拟头结点</strong></p><p>注意头结点的处理，即第一个节点就满足：node.val == val</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head
        node <span class="token operator">=</span> head
        pre <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        prepre <span class="token operator">=</span> pre

        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> node<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>
                pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
                node <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> prepre<span class="token punctuation">.</span><span class="token builtin">next</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：递归</strong></p><p>递归的空间复杂度为O(n)（递归栈）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head
        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>removeElements<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
        <span class="token keyword">if</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>
            <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_206-翻转链表" tabindex="-1"><a class="header-anchor" href="#_206-翻转链表" aria-hidden="true">#</a> 206. 翻转链表</h2>`,8),b={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>难度：简单</p><p><strong>方法1：迭代</strong></p><p>三个指针来操作：left, mid, right</p><p>其中left初始指向哨兵位：None</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head

        left <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 哨兵位</span>
        mid <span class="token operator">=</span> head
        right <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token keyword">while</span> right <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            mid<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left
            left <span class="token operator">=</span> mid
            mid <span class="token operator">=</span> right
            right <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>
        mid<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left  <span class="token comment"># 末尾当头</span>
        <span class="token keyword">return</span> mid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：递归</strong></p><p>最直接想到的思路是，每一个节点都将指针改为指向前一个，然后递归进行这个过程，递归到最后一个节点的时候，就是末尾节点，需要让其指向前一个节点，<strong>但是前一个节点无法知晓</strong>。所以需要自己定义一个函数，将前一个节点和当前节点传入。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">digui</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> curr <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 此时 prev 就是 tail 节点</span>
            <span class="token keyword">return</span> prev
            
        head <span class="token operator">=</span> self<span class="token punctuation">.</span>digui<span class="token punctuation">(</span>curr<span class="token punctuation">,</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        curr<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev  <span class="token comment"># 将当前节点的next指向前一个节点</span>
        
        <span class="token keyword">return</span> head
    
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head
        head <span class="token operator">=</span> self<span class="token punctuation">.</span>digui<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
        <span class="token keyword">return</span> head
        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个递归思路：如何直接用原函数 reverseList 来实现？上面分析了，既然直接让一个传入的节点指向前一个，存在<strong>无法确定其前一个是谁的问题</strong>，所以这里可以直接使用<code>.next</code>来实现窗口大小为3的节点操作，即（白色为原始的指向，绿色为该函数需要实现的指向）：</p><img src="`+c+'" title="" alt="" data-align="center"><p>这里是将递归进行到倒数第二个节点的情况，这里为什么需要将这个节点指向None呢？</p><p>因为如果没有这一步，那么当回溯到第一个节点的时候就出现了环，这就出现了死循环：</p><img src="'+d+`" title="" alt="" data-align="center"><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head
        new_head <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">return</span> new_head
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-两两交换链表中的节点" tabindex="-1"><a class="header-anchor" href="#_24-两两交换链表中的节点" aria-hidden="true">#</a> 24. 两两交换链表中的节点</h2>`,15),y={href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>难度：中等</p><p><strong>方法1：3指针</strong></p><p>可以模拟一下交换两个节点的过程，需要用到三个指针，可以创建一个虚拟头，然后prev指针初始指向虚拟头，另一个指针指向head，还有一个指向head.next。当然还需要将虚拟头保留下来，以便返回结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head
        prev <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
        prev_head <span class="token operator">=</span> prev
        one <span class="token operator">=</span> head
        two <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> one <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> two <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            one<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> two<span class="token punctuation">.</span><span class="token builtin">next</span>
            two<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> one
            prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> two
            prev <span class="token operator">=</span> one
            one <span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> one <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
            two <span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> prev_head<span class="token punctuation">.</span><span class="token builtin">next</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：递归</strong></p><p>本题要两个节点两两交换位置，假设需要交换的是节点one和two，必须要知道one的前置节点才可以，<strong>递归的结束条件一定是传入的head==None或者head.next==None</strong>，因为交换需要两个节点才能完成。如果使用递归从下至上，还是无法知道one的前一个节点。所以要使用从上到下的方式来递归。</p><p>从上到下的方式：初始状态时，交换head和head.next两个节点，设node=head.next，<strong>交换完成之后，node为新的头结点</strong>，然后<strong>继续交换head.next以及之后的节点</strong>，head就成为了下一个交换pair的前置节点，将head和下一个交换pair连接，并返回node（新的头结点）即可完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> 
            <span class="token keyword">return</span> head
        node <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>swapPairs<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码还可以再精简点：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> 
            <span class="token keyword">return</span> head
        node <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>swapPairs<span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        <span class="token keyword">return</span> node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-删除链表的倒数第n个节点" tabindex="-1"><a class="header-anchor" href="#_19-删除链表的倒数第n个节点" aria-hidden="true">#</a> 19. 删除链表的倒数第N个节点</h2>`,11),g={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},f=a(`<p>难度：中等</p><p><strong>方法1：两次遍历</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token comment"># 先统计总节点数</span>
        sz <span class="token operator">=</span> <span class="token number">0</span>
        node <span class="token operator">=</span> head
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            sz <span class="token operator">+=</span> <span class="token number">1</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token comment"># 如果删除首节点</span>
        <span class="token keyword">if</span> n <span class="token operator">==</span> sz<span class="token punctuation">:</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token comment"># 删除其他节点</span>
        node <span class="token operator">=</span> head
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sz <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> head
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：一次遍历</strong></p><p>用快慢指针，快指针比慢指针早n，但是实现代码的时候，一些特殊情况不容易考虑完全：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>
        p <span class="token operator">=</span> head
        q <span class="token operator">=</span> head
        cnt <span class="token operator">=</span> n
        <span class="token keyword">while</span> q <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> cnt <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                cnt <span class="token operator">-=</span> <span class="token number">1</span>
                q <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cnt <span class="token operator">-=</span> <span class="token number">1</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
                q <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> p <span class="token operator">==</span> head<span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 特殊情况</span>
        p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> head
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法3：栈</strong></p><p>先入栈，然后pop掉n个，将此时栈顶节点弹出，node.next=node.next.next</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>
        stack <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
        node <span class="token operator">=</span> head
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        cnt <span class="token operator">=</span> n
        <span class="token keyword">while</span> cnt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cnt <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> stack<span class="token punctuation">:</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> head
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表相交" tabindex="-1"><a class="header-anchor" href="#链表相交" aria-hidden="true">#</a> 链表相交</h2>`,10),x={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"难度：简单",-1),N=n("p",null,[n("strong",null,"方法1：最朴素思想")],-1),L=n("p",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",null,"+"),n("mi",null,"max"),n("mo",null,"⁡"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",{separator:"true"},","),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m+n+\\max(m,n))")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mop"},"max"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},"))")])])])],-1),O=n("p",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])],-1),A=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, x):</span>
<span class="token comment">#         self.val = x</span>
<span class="token comment">#         self.next = None</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token comment"># 统计A链表长度</span>
        lena <span class="token operator">=</span> <span class="token number">0</span>
        node <span class="token operator">=</span> headA
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            lena <span class="token operator">+=</span> <span class="token number">1</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token comment"># 统计B链表长度</span>
        lenb <span class="token operator">=</span> <span class="token number">0</span>
        node <span class="token operator">=</span> headB
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            lenb <span class="token operator">+=</span> <span class="token number">1</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        head1 <span class="token operator">=</span> headA
        head2 <span class="token operator">=</span> headB
        <span class="token comment"># 将较长的链表的多余节点先走完</span>
        <span class="token keyword">if</span> lena <span class="token operator">!=</span> lenb<span class="token punctuation">:</span>
            <span class="token keyword">if</span> lena <span class="token operator">&gt;</span> lenb<span class="token punctuation">:</span>
                n <span class="token operator">=</span> lena <span class="token operator">-</span> lenb
                node <span class="token operator">=</span> headA
                head1 <span class="token operator">=</span> headB
            <span class="token keyword">elif</span> lenb <span class="token operator">&gt;</span> lena<span class="token punctuation">:</span>
                n <span class="token operator">=</span> lenb <span class="token operator">-</span> lena
                node <span class="token operator">=</span> headB
                head1 <span class="token operator">=</span> headA
            
            <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
                n <span class="token operator">-=</span> <span class="token number">1</span>
            head2 <span class="token operator">=</span> node
        
        <span class="token comment"># 接着同步走剩余的节点</span>
        <span class="token keyword">while</span> head1 <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> head1 <span class="token operator">==</span> head2<span class="token punctuation">:</span>
                <span class="token keyword">return</span> head1
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                head1 <span class="token operator">=</span> head1<span class="token punctuation">.</span><span class="token builtin">next</span>
                head2 <span class="token operator">=</span> head2<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：哈希表</strong></p>`,2),B=n("p",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m+n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),M=n("p",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mclose"},")")])])])],-1),S=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, x):</span>
<span class="token comment">#         self.val = x</span>
<span class="token comment">#         self.next = None</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token comment"># 将链表A的所有节点存在hashmap中</span>
        hashmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        node <span class="token operator">=</span> headA
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            hashmap<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token comment"># 遍历链表B，如果遇到已经在A中出现的链表，则结束</span>
        node <span class="token operator">=</span> headB
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> node <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span> <span class="token keyword">return</span> node
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法3：双指针</strong></p><p>思路：先两个指针一起走，设链表A的长度&gt;链表B的长度，各自的指针分别为pa和pb，pb=None之后转移到A链表头，此时pa和pb相隔节点长度为B链表长度。再继续，待pa到达A的末尾，转移到B的开头，此时pb在A的起始位置距离A的末尾长度==A的长度。此时再继续遍历若中途遇到相等的节点，退出。否则相等肯定是pa=None, pb=None。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, x):</span>
<span class="token comment">#         self.val = x</span>
<span class="token comment">#         self.next = None</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        pa <span class="token operator">=</span> headA
        pb <span class="token operator">=</span> headB

        <span class="token keyword">while</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
            <span class="token keyword">if</span> pa <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pa <span class="token operator">=</span> headB
            <span class="token keyword">else</span><span class="token punctuation">:</span> 
                pa <span class="token operator">=</span> pa<span class="token punctuation">.</span><span class="token builtin">next</span>
            
            <span class="token keyword">if</span> pb <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pb <span class="token operator">=</span> headA
            <span class="token keyword">else</span><span class="token punctuation">:</span> 
                pb <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> pa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码实现的时候也有技巧，这里是<strong>先判断，再决定是转移还是next</strong>，如果换成先next后判断是否要转移就<strong>无法通过</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        pa <span class="token operator">=</span> headA
        pb <span class="token operator">=</span> headB

        <span class="token keyword">while</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
            pa <span class="token operator">=</span> pa<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> pa <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pb <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pa <span class="token operator">=</span> headB
            
            pb <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> pb <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pa <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                pb <span class="token operator">=</span> headA
        <span class="token keyword">return</span> pa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_142-环形链表2" tabindex="-1"><a class="header-anchor" href="#_142-环形链表2" aria-hidden="true">#</a> 142. 环形链表2</h2>`,7),D={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},z=a(`<p>难度：中等</p><p><strong>方法1：哈希表</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        hashmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        node <span class="token operator">=</span> head
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> node <span class="token keyword">not</span> <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span>
                hashmap<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> node
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：双指针</strong></p><p>有几个问题需要理清：</p><p><strong>为什么快慢指针如果相遇，一定能在环内相遇，而不是刚好错开？</strong></p><p>因为慢指针速度=1，快指针速度=2，慢指针相当于以速度为1，一个节点一个节点地接近快指针。</p><p><strong>如果有环，如何找到环的入口？</strong></p><p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。</p><img title="" src="`+r+'" alt="" data-align="center"><p>相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针，（y+z）为 一圈内节点的个数A。容易得到：</p>',11),E=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,"+"),n("mi",null,"y"),n("mo",{stretchy:"false"},")"),n("mo",null,"∗"),n("mn",null,"2"),n("mo",null,"="),n("mi",null,"x"),n("mo",null,"+"),n("mi",null,"y"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},"("),n("mi",null,"y"),n("mo",null,"+"),n("mi",null,"z"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"}," (x + y) * 2 = x + y + n (y + z) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"z"),n("span",{class:"mclose"},")")])])])])],-1),I=a(`<p>最终可以化简为：<code>x = (n - 1) (y + z) + z</code> 。注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p><p>上式表示什么含义呢？<strong>如果用速度相同的两个指针（都为1）：一个从头结点开始，另一个指针从相遇节点开始走，两节点相遇处就是环的入口</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>

        <span class="token comment"># 找到相遇点</span>
        slow <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        fast <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> fast <span class="token operator">!=</span> slow<span class="token punctuation">:</span>
            <span class="token keyword">if</span> fast <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>
            <span class="token keyword">if</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token comment"># slow从相遇点继续走，ptr从起点开始走</span>
        <span class="token comment"># 再次相遇则是环的入口</span>
        ptr <span class="token operator">=</span> head
        <span class="token keyword">while</span> ptr <span class="token operator">!=</span> slow<span class="token punctuation">:</span>
            ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span><span class="token builtin">next</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> ptr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function q(P,V){const e=o("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[s("题目："),n("a",m,[s("203. 移除链表元素"),t(e)])]),v,n("p",null,[s("题目："),n("a",b,[s("206. 反转链表"),t(e)])]),h,n("p",null,[s("题目："),n("a",y,[s("24. 两两交换链表中的节点"),t(e)])]),w,n("p",null,[s("题目："),n("a",g,[s("19. 删除链表的倒数第 N 个结点"),t(e)])]),f,n("p",null,[s("题目："),n("a",x,[s("面试题 02.07. 链表相交"),t(e)])]),_,N,L,O,A,B,M,S,n("p",null,[s("题目："),n("a",D,[s("142. 环形链表 II"),t(e)])]),z,E,I])}const F=p(u,[["render",q],["__file","link_list.html.vue"]]);export{F as default};
