import{_ as p,r as e,o,c as i,a as n,b as s,d as t,e as c}from"./app-aa9cafec.js";const l={},u={class:"custom-container info"},r=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),k=n("p",{class:"custom-container-title"},"INFO",-1),d=n("p",null,"参考：",-1),v={href:"https://linxid.notion.site/GPT4-Vision-d42c6033109c4686b372fa73827f7d74#a4929a764b30404f9e190a91fb94fcfb",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cookbook.openai.com/examples/gpt_with_vision_for_video_understanding",target:"_blank",rel:"noopener noreferrer"},b={href:"https://colab.research.google.com/drive/1klmcjdm6065vyW9xDM5tHNg5hHMZ9ZdN?usp=sharing",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),h={href:"https://openai.com/research/gpt-4v-system-card",target:"_blank",rel:"noopener noreferrer"},y=c(`<ul><li>带视觉的 GPT-4 模型的行为与 GPT-4 没有什么不同，除了我们用于模型的系统提示之外</li><li>具有视觉功能的 GPT-4 <strong>并不是一个在文本任务上表现较差的不同模型</strong>，因为它具有视觉功能，它只是添加了视觉功能的 GPT-4</li><li>具有视觉功能的 GPT-4 是模型的一组增强功能</li></ul><h2 id="基于api调用" tabindex="-1"><a class="header-anchor" href="#基于api调用" aria-hidden="true">#</a> 基于API调用</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span>matplotlib inline
<span class="token operator">%</span>reload_ext autoreload
<span class="token operator">%</span>autoreload <span class="token number">2</span>

<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> display<span class="token punctuation">,</span> Image<span class="token punctuation">,</span> Audio
<span class="token keyword">import</span> cv2  <span class="token comment"># We&#39;re using OpenCV to read video, to install !pip install opencv-python</span>
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> time
<span class="token keyword">from</span> openai <span class="token keyword">import</span> OpenAI
<span class="token keyword">import</span> os
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;http_proxy&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://localhost:7890&quot;</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;https_proxy&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://localhost:7890&quot;</span>
<span class="token keyword">import</span> requests

OPENAI_API_KEY <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span>
client <span class="token operator">=</span> OpenAI<span class="token punctuation">(</span>api_key<span class="token operator">=</span>OPENAI_API_KEY<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先参考OpenAI的教程，使用GPT-4为一段视频生成描述。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>video <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">&quot;data/bison.mp4&quot;</span><span class="token punctuation">)</span>

base64Frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> video<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    success<span class="token punctuation">,</span> frame <span class="token operator">=</span> video<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> success<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    _<span class="token punctuation">,</span> <span class="token builtin">buffer</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>
    base64Frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

video<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>base64Frames<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;frames read.&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看是否正确展示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>display_handle <span class="token operator">=</span> display<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> display_id<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> img <span class="token keyword">in</span> base64Frames<span class="token punctuation">:</span>
    display_handle<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Image<span class="token punctuation">(</span>data<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>img<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.025</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向GPT发送请求（不需要将每一帧都发给GPT）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>PROMPT_MESSAGES <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;These are frames from a video that I want to upload. Generate a compelling description that I can upload along with the video.&quot;</span><span class="token punctuation">,</span>
            <span class="token operator">*</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span> <span class="token string">&quot;resize&quot;</span><span class="token punctuation">:</span> <span class="token number">768</span><span class="token punctuation">}</span><span class="token punctuation">,</span> base64Frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
params <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;model&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;gpt-4-vision-preview&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;messages&quot;</span><span class="token punctuation">:</span> PROMPT_MESSAGES<span class="token punctuation">,</span>
    <span class="token string">&quot;max_tokens&quot;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

result <span class="token operator">=</span> client<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用脚本完成简单的chat" tabindex="-1"><a class="header-anchor" href="#用脚本完成简单的chat" aria-hidden="true">#</a> 用脚本完成简单的Chat</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">from</span> openai <span class="token keyword">import</span> OpenAI
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> base64

<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> supervision <span class="token keyword">as</span> sv

<span class="token keyword">from</span> ultralytics <span class="token keyword">import</span> YOLO
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token punctuation">,</span> Dict

OPENAI_API_KEY <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span>
client <span class="token operator">=</span> OpenAI<span class="token punctuation">(</span>api_key<span class="token operator">=</span>OPENAI_API_KEY<span class="token punctuation">)</span>

os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;http_proxy&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://localhost:7890&quot;</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;https_proxy&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://localhost:7890&quot;</span>

OPENAI_API_URL <span class="token operator">=</span> <span class="token string">&quot;https://api.openai.com/v1/chat/completions&quot;</span>


<span class="token keyword">def</span> <span class="token function">encode_image_to_base64</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    success<span class="token punctuation">,</span> <span class="token builtin">buffer</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span><span class="token string">&#39;.jpg&#39;</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> success<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Could not encode image to JPEG format.&quot;</span><span class="token punctuation">)</span>

    encoded_image <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> encoded_image


<span class="token keyword">def</span> <span class="token function">compose_payload</span><span class="token punctuation">(</span>images<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> prompt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>
    text_content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;text&quot;</span><span class="token punctuation">:</span> prompt
    <span class="token punctuation">}</span>
    image_content <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;image_url&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;image_url&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;url&quot;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;data:image/jpeg;base64,</span><span class="token interpolation"><span class="token punctuation">{</span>encode_image_to_base64<span class="token punctuation">(</span>image<span class="token operator">=</span>image<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> image
        <span class="token keyword">in</span> images
    <span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;model&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;gpt-4-vision-preview&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;messages&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>text_content<span class="token punctuation">]</span> <span class="token operator">+</span> image_content
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&quot;max_tokens&quot;</span><span class="token punctuation">:</span> <span class="token number">300</span>
    <span class="token punctuation">}</span>


<span class="token keyword">def</span> <span class="token function">compose_headers</span><span class="token punctuation">(</span>api_key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;Bearer </span><span class="token interpolation"><span class="token punctuation">{</span>api_key<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>


<span class="token keyword">def</span> <span class="token function">prompt_image</span><span class="token punctuation">(</span>api_key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> images<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> prompt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token comment"># 方法1：</span>
    headers <span class="token operator">=</span> compose_headers<span class="token punctuation">(</span>api_key<span class="token operator">=</span>api_key<span class="token punctuation">)</span>
    payload <span class="token operator">=</span> compose_payload<span class="token punctuation">(</span>images<span class="token operator">=</span>images<span class="token punctuation">,</span> prompt<span class="token operator">=</span>prompt<span class="token punctuation">)</span>
    <span class="token comment"># # 方法1：</span>
    <span class="token comment"># response = requests.post(url=OPENAI_API_URL, headers=headers, json=payload).json()</span>
    <span class="token comment"># if &#39;error&#39; in response:</span>
    <span class="token comment">#     raise ValueError(response[&#39;error&#39;][&#39;message&#39;])</span>
    <span class="token comment"># return response[&#39;choices&#39;][0][&#39;message&#39;][&#39;content&#39;]</span>
    <span class="token comment"># 方法2：</span>
    response <span class="token operator">=</span> client<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>content



prompt <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;...&quot;</span>
    <span class="token string">&quot;...&quot;</span>
<span class="token punctuation">)</span>
response <span class="token operator">=</span> prompt_image<span class="token punctuation">(</span>api_key<span class="token operator">=</span>OPENAI_API_KEY<span class="token punctuation">,</span> images<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prompt<span class="token operator">=</span>prompt<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function q(_,w){const a=e("ExternalLinkIcon");return o(),i("div",null,[n("div",u,[r,k,d,n("p",null,[n("a",v,[s("关于GPT4 Vision的使用和一些模型结构的猜想 (notion.site)"),t(a)])]),n("p",null,[n("a",m,[s("Processing and narrating a video with GPT's visual capabilities and the TTS API | OpenAI Cookbook"),t(a)])]),n("p",null,[n("a",b,[s("sports analysis with gpt-4 vision"),t(a)])])]),g,n("p",null,[s("GPT-4 with Vision（有时在 API 中称为 "),n("a",h,[s("GPT-4V"),t(a)]),s(" 或 gpt-4-vision-preview ）")]),y])}const P=p(l,[["render",q],["__file","GPT4vdeshiyong.html.vue"]]);export{P as default};
