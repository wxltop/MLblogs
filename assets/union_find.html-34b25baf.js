import{_ as e,r as o,o as c,c as u,a as n,b as s,d as p,e as t}from"./app-aa9cafec.js";const l="/MLblogs/assets/2024-01-27-23-29-11-image-b484216c.png",i={},k=n("h2",{id:"并查集理论基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#并查集理论基础","aria-hidden":"true"},"#"),s(" 并查集理论基础")],-1),r={href:"https://www.programmercarl.com/%E5%9B%BE%E8%AE%BA%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>并查集常用来解决连通性问题。</p><p>大白话就是当我们需要判断两个元素是否在同一个集合里的时候，我们就要想到用并查集。</p><p>并查集主要有两个功能：</p><ul><li>将两个元素添加到一个集合中。</li><li>判断两个元素在不在同一个集合</li></ul><p><strong>实现上：</strong></p><p>如果两个节点同属于一个集合，那么两个节点就有相同的根节点。</p><p><strong>初始化的时候，每一个节点的根节点是自己。</strong> 除此之外，并查集的模板代码一般需要实现这几个函数：</p><ol><li>寻找根节点，函数：find(int u)，也就是判断这个节点的祖先节点是哪个</li><li>将两个节点接入到同一个集合，函数：join(int u, int v)，将两个节点连在同一个根节点上</li><li>判断两个节点是否在同一个集合，函数：isSame(int u, int v)，就是判断两个节点是不是同一个根节点</li></ol><p>判断两个节点是否属于同一个根：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 判断 u 和 v是否找到同一个根</span>
<span class="token keyword">bool</span> <span class="token function">isSame</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    u <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> u <span class="token operator">==</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将两个节点放入同一个集合。<strong>注意不是简单将两个节点关联，而是要先查找两个节点的根节点，然后根节点去关联</strong>。比如<code>join(1, 2)</code>然后<code>join(3, 2)</code>，如果是两个节点的关联，虽然两个节点同属一个集合，但是1和3的根节点不同（都是本身），导致判断是否属于一个集合错误。如果是先找各自的根节点，然后根节点互相关联，经过<code>join(1, 2)</code>之后，2的根节点是1，经过<code>join(3, 2)</code>后，先找到2的根节点1，然后1再指向3（将根节点设为3），这样1和3的根节点相同，同属于一个集合。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 v 指向 u 的根节点（v的根节点设置为u的根节点）</span>
    u <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找u的根</span>
    v <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找v的根</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token comment">// 若发现根相同，则说明在同一个集合</span>
    father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过还有一种<strong>按秩合并</strong>的方法如下。这种按秩合并还有上面的方法的区别在于，按秩合并会自动判断将谁合并到谁上面，可以让树的高度最小；而上面的做法直接就将v合并到u上面，是自己来判断方向的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    u <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rank<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> rank<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> rank<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找根节点的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>路径压缩</strong></p><p>如果两个节点同属于一个集合，我们希望在使用<code>find</code>的时候，越快越好，所以更倾向于距离根节点越近越好（所有其他节点都挂载在根节点之后）。路径压缩可以结合在find函数内：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 路径压缩</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这里有一个疑问：既然father[node]的含义是，node的根节点，那么为什么不直接在find函数内返回father[u]呢，而是要和上述代码一样呢？因为虽然father的含义是这个，但是随着图中节点的增加，根节点可能会变化的，如果find函数是直接使用father的值，那么就得另外定义个函数来更新这个father值，所以还不如每一次find的时候都更新一下。</p><p>所以<code>find</code>函数完成的功能有：<strong>找到根节点，更新根节点，路径压缩</strong>。</p><p><strong>复杂度分析：</strong></p><p>空间复杂度： O(n) ，申请一个father数组。</p><p>时间复杂度：路径压缩后的并查集时间复杂度在O(logn)与O(1)之间，且随着查询或者合并操作的增加，时间复杂度会越来越趋于O(1)。</p><p><strong>在第一次查询的时候，相当于是n叉树上从叶子节点到根节点的查询过程，时间复杂度是logn，但路径压缩后，后面的查询操作都是O(1)</strong>，而 join 函数 和 isSame函数 里涉及的查询操作也是一样的过程。</p><h2 id="_1917-寻找图中是否存在路径" tabindex="-1"><a class="header-anchor" href="#_1917-寻找图中是否存在路径" aria-hidden="true">#</a> 1917. 寻找图中是否存在路径</h2>`,26),v={href:"https://leetcode.cn/problems/find-if-path-exists-in-graph/",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>难度：简单</p><p><strong>方法1：bfs</strong></p><p>注意visited[next_node]使用的位置。时间复杂度：O(m+n)，先构建map，然后遍历所有的节点。空间复杂度：O(m+n)。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">validPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
            <span class="token keyword">if</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token builtin">map</span><span class="token punctuation">:</span>
                <span class="token builtin">map</span><span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token builtin">map</span><span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token builtin">map</span><span class="token punctuation">:</span>
                <span class="token builtin">map</span><span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token builtin">map</span><span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

        visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        visited<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment">#  第一个点需要标记</span>
        <span class="token keyword">while</span> q<span class="token punctuation">:</span>
            node <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> node <span class="token operator">==</span> destination<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">for</span> next_node <span class="token keyword">in</span> <span class="token builtin">map</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> visited<span class="token punctuation">[</span>next_node<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>  <span class="token comment"># 若已经标记，不入队</span>
                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>next_node<span class="token punctuation">)</span>
                visited<span class="token punctuation">[</span>next_node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 若入队，标记</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2：并查集</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 找u的根节点</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> u<span class="token punctuation">:</span> <span class="token keyword">return</span> u
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">join</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">if</span> u <span class="token operator">==</span> v<span class="token punctuation">:</span> <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u

    <span class="token keyword">def</span> <span class="token function">sameRoot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">return</span> u <span class="token operator">==</span> v

    <span class="token keyword">def</span> <span class="token function">validPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>root <span class="token operator">=</span> self<span class="token punctuation">.</span>init<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">:</span>  <span class="token comment"># 构建图</span>
            self<span class="token punctuation">.</span>join<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sameRoot<span class="token punctuation">(</span>source<span class="token punctuation">,</span> destination<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_684-冗余连接" tabindex="-1"><a class="header-anchor" href="#_684-冗余连接" aria-hidden="true">#</a> 684. 冗余连接</h2>`,7),b={href:"https://leetcode.cn/problems/redundant-connection/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>难度：中等</p><p><strong>方法1：并查集</strong></p><p>思路：树加一条边一定出现环，按照题目要求删除出现在环内、最晚出现在边列表的那条边，为了找出这条多余的边，可以从左到右遍历边，假设一开始所有节点都是独立的连通分量（都不连通），对每一条边判断两个端点是否在同一个集合内，<strong>若不在，则将两个端点加入同一个集合</strong>；<strong>若已经在了，说明这两个点本身已经连通，但是现在还要再连一条边，那么这条边就是导致环出现的原因</strong>，删除即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">sameRoot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">return</span> u <span class="token operator">==</span> v

    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">if</span> u <span class="token operator">==</span> v<span class="token punctuation">:</span> <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u

    <span class="token keyword">def</span> <span class="token function">findRedundantConnection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>init<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>sameRoot<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>union<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> 
                <span class="token keyword">return</span> e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本解法官方给出了很详细的时间复杂度分析：</p><p>时间复杂度：O(nlog⁡n)，其中 n 是图中的节点个数。需要遍历图中的 n 条边，对于每条边，需要对两个节点查找祖先，如果两个节点的祖先不同则需要进行合并，需要进行 2 次查找和最多 1 次合并。一共需要进行 2n 次查找和最多 n 次合并，因此总时间复杂度是 O(2nlog⁡n)=O(nlog⁡n)。这里的并查集使用了路径压缩，但是没有使用按秩合并，最坏情况下的时间复杂度是 O(nlog⁡n)，平均情况下的时间复杂度依然是 O(nα(n))，其中 α 为阿克曼函数的反函数，α(n) 可以认为是一个很小的常数。</p><p>其实可以一句话概括：时间复杂度在O(nlogn)和O(1)之间，因为一开始第一次没有压缩路径，是一个树的遍历过程，后来就是高度为2的树的遍历，时间复杂度就为O(1).</p><h2 id="_685-冗余连接2" tabindex="-1"><a class="header-anchor" href="#_685-冗余连接2" aria-hidden="true">#</a> 685. 冗余连接2</h2>`,8),g={href:"https://leetcode.cn/problems/redundant-connection-ii/",target:"_blank",rel:"noopener noreferrer"},y=t('<p>难度：困难</p><p><strong>方法1：并查集</strong></p><p>本题给人感觉用前一题的思路也能搞定，测试之后发现，这个例子就不行：</p><p>edges = [[2,1],[3,1],[4,2],[1,4]]</p><img src="'+l+`" title="" alt="" data-align="center"><p>如果将[1,4]删掉，发现4和3都成了根节点，不是树。</p><p>代码随想录给出了一种思路：将这些情况分为三种，其中两种是包含入度=2的点，第三种是不包含入度=2的点，包含有向环。</p><p><strong>对于有入度=2的节点的情况</strong>，一定删除该点的两条边的其中一条，若删除之后仍然是树，则该边就是答案，否则删除另一条（重点就是要判断删除这条边之后是否是树）；</p><p><strong>对于不包含入度=2的点，包含有向环的图的情况</strong>，则删除构成环的最后一条边（这部分实现起来代码和上一题代码一样）。</p><p>判断是否是树，可以将未删除的边一条一条加进来，如果<strong>删除错误，则剩下来的是有向环</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">join</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">if</span> u <span class="token operator">==</span> v<span class="token punctuation">:</span> <span class="token keyword">return</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">sameRoot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">return</span> u <span class="token operator">==</span> v

    <span class="token keyword">def</span> <span class="token function">isTreeAfterRemoveEdge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> deleted<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> deleted<span class="token punctuation">:</span> <span class="token keyword">continue</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>sameRoot<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
            self<span class="token punctuation">.</span>join<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">def</span> <span class="token function">getRemoveEdge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>sameRoot<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>join<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> 
                <span class="token keyword">return</span> e

    <span class="token keyword">def</span> <span class="token function">findRedundantDirectedConnection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        degree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment"># 统计入度</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
            degree<span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment"># 找到入度=2的点所对应的边(反向遍历来找)</span>
        to_delete <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> degree<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
                to_delete<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

        <span class="token comment"># 情况1 和 情况2</span>
        <span class="token comment"># 有入度=2的情况</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>to_delete<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>isTreeAfterRemoveEdge<span class="token punctuation">(</span>edges<span class="token punctuation">,</span> to_delete<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> edges<span class="token punctuation">[</span>to_delete<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> edges<span class="token punctuation">[</span>to_delete<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

        <span class="token comment"># 情况3</span>
        <span class="token comment"># 当没有入度=2的情况，处理有向环</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>getRemoveEdge<span class="token punctuation">(</span>edges<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：因为有统计入度和找对应的边，这两个步骤需要遍历边列表，复杂度为O(n)。其他情况，find和join等，第一次为O(nlogn)，后续为O(1)。</p><p>空间复杂度：O(n)。</p>`,13);function w(h,_){const a=o("ExternalLinkIcon");return c(),u("div",null,[k,n("p",null,[n("a",r,[s("代码随想录"),p(a)])]),d,n("p",null,[s("题目："),n("a",v,[s("1971. 寻找图中是否存在路径"),p(a)])]),m,n("p",null,[s("题目："),n("a",b,[s("684. 冗余连接"),p(a)])]),f,n("p",null,[s("题目："),n("a",g,[s("685. 冗余连接 II"),p(a)])]),y])}const E=e(i,[["render",w],["__file","union_find.html.vue"]]);export{E as default};
